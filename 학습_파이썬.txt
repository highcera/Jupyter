
■  파이썬 GUI 기초
https://blog.naver.com/PostView.naver?blogId=sagala_soske&logNo=221730664526



■ 파이썬(Python) 문자열을 나눌 수 있는 split 함수
    https://mainia.tistory.com/5624

문자열은 문자, 단어 등으로 구성된 문자들의 집합입니다. 
문자열을 변수에 저장하면 문자열 객체가 됩니다.
문자열 객체는 str 클래스의 객체입니다.
그래서 str 클래스 내부 함수를 모두 사용할 수 있습니다.
많은 내부 함수 중에서 문자열을 특정 구분자로 나누고 싶을 때 split() 함수를 사용합니다.

▼ split 문법은 다음과 같습니다. 문자열을 나눌 때 구분자는 seq 파라미터로 입력합니다. maxsplit 는 나누고 싶은 개수를 정할 때 사용합니다. 예제를 통해서 사용 방법을 알아 보겠습니다.
str.split(seq=none, maxsplit=-1)

▼ maxsplit 분리할 문자 개수를 지정할 때 사용합니다. 만약 1을 입력하면 maxsplit + 1 더해 져서 2개로 분리가 됩니다. 
maxsplit 으로 값을 입력하지 않으면 기본값 -1 이 들어갑니다. 
분리하는 순서는 앞에서 차례대로 입니다. 
예제에서는 maxsplit=2 를 입력했습니다. 분리되는 개수는 3개가 됩니다. 나머지 하나는 분리되지 않은 채 남습니다.
>>> '1,2,3,4'.split(',', maxsplit=2)
['1', '2', '3,4']

▼ maxsplit 에 아무것도 입력하지 않으면 seq 값 만으로 4개 모두를 분리합니다.
>>> '1,2,3,4'.split(',')
['1', '2', '3', '4']

▼ 분리 문자 사이에 공백은 어떻게 처리할 까요? 파라미터 seq 는 분리 기준 문자로 공백까지 포함해서 분리합니다. 
예제처럼 분리기준인 “,” 를 기점으로 중간과 마지막 공백도 분리했습니다.
>>> '1,2,,3,'.split(',')
['1', '2', '', '3', '']

▼ 만약 아무것도 입력하지 않으면 어떻게 될까요? 알아서 분리할 문자를 찾아 작업을 수행합니다. 
하지만 두 번째 예제처럼 패턴이 일정하지 않으면 제대로 된 결과값을 얻을 수 없습니다.
>>> '1,2,3'.split(',')
['1', '2', '3']

>>> '1,2,,3,'.split()
['1,2,,3,']

▼ 다음은 분리한 문자를 저장하는 독특한 방식을 알려 드리겠습니다. 보통 split() 함수를 실행해서 변수에 저장하면 배열이 됩니다.
>>> arr = 'a,b,c'.split(',')
>>> arr[0]
'a'
>>> arr[1]
'b'
>>> arr[2]
'c'

▼ 이번에는 하나의 변수가 아닌 분리되는 개수만큼 변수를 만들어 지정해 보세요. 각각의 변수에는 분리된 값들이 자동으로 들어갑니다.
>>> x, y, z = 'a,b,c'.split(',')
>>> x
'a'
>>> y
'b'
>>> z
'c'


# 출처: https://data-make.tistory.com/176

from pandas import ExcelWriter

def save_xls(list_dfs, xls_path):
    writer = ExcelWriter(xls_path) 
    for n, df in enumerate(list_dfs):    
        df.to_excel(writer,'sheet%s' % n)
        writer.save()
category_list = [data1, data2, data3]
save_xls(category_list, '/Users/aaron/Desktop/result.xlsx')


import pandas as pd
import tkinter as tk
import os

os.chdir('C:/Users/Administrator/Documents/쉽고 빠르게 배우는 파이썬 GUI 프로그래밍_실습예제/11장-12장-13장-데이터분석도구팬더스-DataFrame-시각화등')


def   read_data():
    global data, df, pd
    df=pd.read_csv( "tips.csv")
    df=df.apply(pd.to_numeric, errors='ignore')

def display_title(wnd, d_frame):
    title=list(d_frame.columns)
    e=tk.Entry(wnd, text=' ', width=10, bg='gray', fg='white')
    for  i   in   range(len(title)):
         e = tk.Entry(wnd, width=10, bg='gray', fg='white')
         e.insert(0, title[i])
         e.grid(row=0,column=i+1) 


def display_pandas(wnd, d_frame):
    rows, cols = d_frame.shape
     
    for r in range(rows):
         e = tk.Entry(wnd, bg='gray',fg='white', width=10)
         e.insert(0, d_frame.index[r])
         e.grid(row=r+1,column= 0)

         for c in range(cols):
             e = tk.Entry(wnd, width=10)
             e.insert(0, d_frame.iloc[r,c])
             e.grid(row=r+1, column=c+1)

win = tk.Tk()

read_data()
win.title("처리결과")
display_title(win,df)
display_pandas(win, df)

win2= tk.Tk()
win2.title('기초통계 요약')
df2=df.describe()
display_title(win2, df2)
display_pandas(win2, df2)

win3= tk.Tk()
win3.title('소숫점 자릿수 조정')
df3=df2.round(2)
display_title(win3, df3)
display_pandas(win3, df3)

df4=df.copy()
df4['비율'] = df['tip'] / df['total_bill'] *100
df4 = df4.round({'비율':2})
print(df4)
print(df4.describe())

win5= tk.Tk()
win5.title('팁 6$ 이상 고객')
df5=df[df.tip>=6]
display_title(win5, df5)
display_pandas(win5, df5)



win.mainloop()


버튼으로 Tkinter Entry 위젯의 텍스트를 설정하는 방법
 
창립일자: April-04, 2020 | 갱신일자: June-25, 2020

  
Tkinter delete 및 insert 방법으로 Entry 의 내용을 설정
Tkinter Entry 위젯의 컨텐츠를 설정하는 Tkinter StringVar 메소드
버튼을 클릭하여 Tkinter Entry 위젯의 텍스트를 설정하거나 변경하는 두 가지 방법이 있습니다.

Tkinter delete 및 insert 메소드
Tkinter StringVar 메소드
Tkinter delete 및 insert 방법으로 Entry 의 내용을 설정


Tkinter Entry 위젯에는 Entry 의 컨텐츠를 설정하기위한 전용 set 메소드가 없습니다. 컨텐츠를 완전히 변경해야하는 경우 먼저 기존 컨텐츠를 삭제 한 다음 새 컨텐츠를 삽입해야합니다.



delete 및 insert 메소드를 사용하여 Entry 에 텍스트를 설정하는 완전한 작업 코드
import tkinter as tk
root = tk.Tk()
root.geometry("400x50")

def setTextInput(text):
    textExample.delete(0,"end")
    textExample.insert(0, text)

textExample = tk.Entry(root)
textExample.pack()

btnSet = tk.Button(root, height=1, width=10, text="Set", 
                    command=lambda:setTextInput("new content"))
btnSet.pack()

root.mainloop()
Tkinter Tkinter Entry_delete 의 내용 설정 및 삽입 방법

textExample.delete(0,"end")
Entry 의 delete 메소드는 Entry 에서 지정된 문자 범위를 삭제합니다.


0 은 첫 번째 문자이고"end"는 Entry 위젯에서 컨텐츠의 마지막 문자입니다. 따라서 delete(0, "end")는 Text 상자 안의 모든 내용을 삭제합니다.

textExample.insert(0, text)
insert 메소드는 텍스트를 지정된 위치에 삽입합니다. 위의 코드에서 시작 부분에 ‘텍스트’를 삽입합니다.

Tkinter Entry 위젯의 컨텐츠를 설정하는 Tkinter StringVar 메소드
Tkinter Entry 위젯의 컨텐츠가 StringVar 오브젝트와 연관된 경우,StringVar 값이 업데이트 될 때마다 Tkinter Entry 위젯의 컨텐츠를 자동으로 변경할 수 있습니다.

StringVar 객체를 사용하여 Entry 에 텍스트를 설정하는 완전한 작업 코드
import tkinter as tk
root = tk.Tk()
root.geometry("400x50")

def setTextInput(text):
    textEntry.set(text)

textEntry = tk.StringVar()

textExample = tk.Entry(root,
                      textvariable = textEntry)
textExample.pack()

btnSet = tk.Button(root,
                   height=1,
                   width=10,
                   text="Set",
                   command=lambda:setTextInput("new content"))
btnSet.pack()

root.mainloop()
textEntry = tk.StringVar()

textExample = tk.Entry(root,
                      textvariable = textEntry)
textEntry 는 StringVar 객체이며 텍스트 내용 또는 다른 말로 Entry 위젯의 textvariable 옵션과 연관되어 있습니다.

textEntry.set(text)
textEntry 가 새로운 값 text 를 갖도록 갱신되면,textvariable 과 연관된 위젯이 자동으로 갱신됩니다.


#방법 1
import matplotlib
import matplotlib.font_manager as fm

fm.get_fontconfig_fonts()
font_location = 'C:/Windows/Fonts/NanumMyeongjo.ttf' # For Windows
font_name = fm.FontProperties(fname=font_location).get_name()
matplotlib.rc('font', family=font_name)


#방법 2
import matplotlib.pyplot as plt

plt.rc('font', family='NanumMyeongjoOTF') # For MacOS
print(plt.rcParams['font.family'])

plt.rc('font', family='NanumMyeongjo') # For Windows
print(plt.rcParams['font.family'])



C:\Users\Administrator\AppData\Local\Microsoft\Windows\Fonts
NanumBarunGothic.ttf

import matplotlib.pyplot as plt
import matplotlib.font_manager as fm

font_location = 'C:/Users/Administrator/AppData/Local/Microsoft/Windows/Fonts/NanumBarunGothic.ttf'
font_name = fm.FontProperties(fname=font_location).get_name()

plt.rc('font', family=font_name)

Spyder 
주석 일괄 반영 Ctrl + 1

■ 파이썬 GUI Programming & widget
import tkinter

win = tkinter.Tk()
win.title('윈도우 생성하기')

lbl=tkinter.Label(win, text= " 안녕 파이썬~")
lbl.pack()

lbl2=tkinter.Label(win, text="hello world~", bg='red', fg='white')
lbl2.pack(fill='x')

win.mainloop()

import tkinter
win = tkinter.Tk()
ent1 = tkinter.Entry(win,
                      relief='ridge',
                      borderwidth=3,
                      highlightcolor="red",
                      highlightthickness=3,
                      highlightbackground='yellow',
                      takefocus=True)

ent1.pack()

ent2 = tkinter.Entry(win,
                      relief='ridge',
                      borderwidth=3,
                      highlightcolor="red",
                      highlightthickness=3,
                      highlightbackground='yellow',
                      takefocus=True)
ent2.pack()
win.mainloop()


■ Excel 화일 읽기
import pandas as pd
bike_data = pd.read_csv('data/bike_usage_0.csv', encoding = 'ANSI') ,sep='\t'

# dataset1 이라는 변수에 해당 파일을 저장합니다.
dataset1 = pd.read_csv('/Users/gbpark/Downloads/rootkey.csv', index_col = 0) # 옵션: 인덱스 칼럼 제외
dataset1 # 변수에 파일이 잘 저장이 되었는지 확인합니다.

# (2) xlsx 형식의 파일을 불러오는 경우
dataset2 = pd.read_excel('/Users/gbpark/Downloads/rootkey.xlsx', index_col = 0) # 옵션: 인덱스 칼럼 제외
dataset2 # 변수에 파일이 잘 저장이 되었는지 확인합니다.

dataset3 = pd.read_csv('/Users/gbpark/Downloads/rootkey.csv', sheet_name = 'sheet1', index_col = 0) # 옵션: 인덱스 칼럼 제외
dataset3 # 변수에 파일이 잘 저장되었는지 확인합니다.

import xlwings as xw
book = xw.Book(file_name)
df = book.sheets(1).used_range.options(pd.DataFrame).value
self.df = pd.DataFrame(df.iloc[1:, :21].dropna(axis = 0, how = 'all').values, columns = df.iloc[0, :21].values)


■ xlwings

import os
os.listdir()
os.chdir("P:\개인자료")

import xlwings as xw
def automate_excel(file_name):
    bk = xw.Book(file_name)
    sh = bk.sheets(1)
    df = sh['A1:E7'].options(pd.DataFrame).value
    return df

df_auto = automate_excel('주식_종목_리스트2.xlsx')
df_auto



■ dc-bias library 분석

▶ 실행 문제 있던 것들
self.cboPow.textActivated.connect(self.filter_fir)
→ self.cboPow.activated[str](self.filter_fir)
   #    self.cboDiel.textActivated.connect(self.filter_sec)
   #    self.cboFreq.textActivated.connect(self.filter_thr)

 # self.lblaging.clear()
 # self.lbltime.clear()


import pandas as pd
bk2 = xw.Book('Dc-bias_library_V2.xlsx')

df = bk2.sheets(1).used_range.options(pd.DataFrame).value


df2 = pd.DataFrame(df.iloc[1:, :21].dropna(axis = 0, how = 'all').values, columns = df.iloc[0, :21].values)

mat = list(set(df2["조성"]))
mat = [x for x in mat if pd.isnull(x) == False]
mat.sort()

lib = pd.DataFrame(df2, columns = ["조성","유전율", "vol_lev", "DC-Bias 측정", '전압 (Vdc)', 'sheet 두께', 'DF', '주파수(kHz)', 'AC(V)', '전압유지시간', 'Aging 시간'])
lib["유전율"] = [int(x) if x != '사이즈 없음' else x for x in lib['유전율']]

