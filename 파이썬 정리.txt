https://wikidocs.net/


Update

1. data 조합 2x2 최신판?
   data 영역 외 문제 있을 시 오류 → 일단 수동 검증 필요
   data 20개 문제 → max quantity 반영

   censor 강제 0 문제 해결 필요
   저장 화일명 미수정 시 덮어씀 문제 → 자동 생성 - 입력받은 폴더 + 화일이름 + comi.xlsx
   

2. 


웹프로그래밍 
1. 설비 가동 현황 
  : 신뢰성 설비예약 / 출장자 좌석예약 (http://16.3.23.182) - 오범석P
    , e-meeting 예약 검토 (http://166.79.55.37:2200/EMT/main.jsp)







Database

csv (쉼표로 구분) + pandas
def save(item1, item2, item3):
    idx = len(pd.read_csv("path+file name")
    new_df = pd.DataFrame({"title1":item1,
                                   "title2":item2,
                                   "title3":item3},
                                   index = [idx])
    new_df.to_csv("path+file name", mode = "a", header = False)
    return None
 
def load_list():
    house_list = []
    df = pd.read_csv("path+file name")
    for i in range(len(df)):
        house_list.append(df.iloc[i].tolist())
        return house_list

def now_index():
    df = pd.read_csv("path+file name")
    return len(df)-1

def load_house(idx):
    df = pd.read_csv("path+file name")
    house_info = df.iloc[idx]
    return house_info



GUI Programing
Designer 사용 *.ui → *.py
Coding 
form 입력 : data 적정성 검토 → data 입력
data base : txt / cvs / firebase 활용 (회사 연결 X)
data display

Data 관리 : 신뢰성 평가 결과
예약 관리 : 신뢰성 설비 투입, 현황 관리

→ 웹 활용 필요 


E:\Repo_Office\Flatform\Basic

ui to py 변환
cmd
C:\>e:
E:\>cd Repo_Office\Flatform\Basic
E:\Repo_Office\Flatform\Basic>python -m PyQt5.uic.pyuic -x form_code.ui -o form_code.py


■ GUI 
designer.exe
C:\Users\Administrator\AppData\Local\Programs\Python\Python38\Lib\site-packages\qt5_applications\Qt\bin

■ [Python/Pyqt5] QWidget, QMainWindow, Qdialog 차이 총정리 (ft. Modal과 Modeless)
    https://coding-kindergarten.tistory.com/171

파이썬 Pyqt5 패키지로 GUI 창을 만들 때 사용되는 QWidget, QDialog, QMainWindow 클래스 3형제들입니다.

class MyWindow(QWidget):
    def __init__(self):
        super().__init__()

구글링하면 Pyqt5 관련 패키지의 코드들을 보면 QWidget이 들어간 자리에 이 3형제들이 골고루 들어가 있어서 혼란스러웠기에 저같은 분들이 있으실 듯 하여 정리해보는 시간을 갖기로 하였습니다.
참고로 제가 즐겨 사용하는 qt designer을 켜면 아래와 같이 3가지 클래스(Dialog, Main Window, Widget)를 선택하는 창이 가장 처음 출력됩니다.

1. QWidget
QWidget을 딱 한마디로 설명하면 버튼, input 위젯 같은 다양한 위젯들을 올려놓을 수 있는 사각형의 영역입니다.
즉, 그림을 그릴 수 있는 도화지 같은 것이죠.
특징으로는 Main Window와 다르게 상단의 메뉴창과 하단의 상태창을 추가할 수 없습니다.

qt designer에서의 창 형태
​qt designer에서의 객체 및 클래스 분류
 
2. QMainWindow
위에서 잠시 보았던 QWidget과 비슷하지만 조금 다릅니다.
QMainWindow는 최상위 위젯으로 메뉴바, 도구 모음, 상태바등이 포함된 미리 정의된 레이아웃을 가지고 있습니다.

가장 기본적인 QMainWindow의 형태

qt designer의 객체 탐색기를 살펴보면 QMainWindow라는 상위 클래스에 QWidget이 속해 있는 것을 알 수 있죠.
즉, MainWindow를 도화지와 도화지를 담고 있는 프레임이라고 생각하시면 됩니다.

qt designer에서의 객체 및 클래스 분류

3. QDialog
항상 별도의 창에 표시되는 대화상자로, 주로 우리가 흔히 보는 팝업창이나 경고창 역할을 주로 합니다.
아래의 그림에서 보시면 기본 템플릿에서 버튼을 제공하는 것이 있는데, 주로 사용자가 간단히 확인, 취소 버튼을 누를 때 사용하기 때문입니다. 아직 테스트는 해보지 않았지만 버튼을 최대로 넣을 수 있는 제한 같은게 있다고 하네요.

겉보기에는 Qwidget과 별 다를 것이 없죠?

qt designer에서의 객체 및 클래스 분류

4. Modal, Modeless 개념 (참고)
위에서 배운 기본적인 GUI 창 3형제를 더 깊이 이해하려면 Modal 및 Modaless의 개념에 대해서 알아야 합니다.
두 개념은은 MainWindow를 제외한 Widget과 Dialog에서 사용하는 실행 형식입니다.

참고로 Dialog 창은 Modal 속성을 주로 사용한답니다.

1) Modal
- 새롭게 Modal 속성을 가진 창이 열렸을 경우 기존에 있던 창을 사용하지 못하는 '제어권 독점' 방식입니다.
  (이 특성을 이용해서 중요한 메세지를 표시하는 Dialog는 거의 Modal 창을 이용합니다.)
- exec()의 실행 형식으로 독립적입니다. (이 부분은 좀 더 공부 필요)

2) Modeless
- 어느 하나의 Dialog 창이 있어도 프로그램 제어권을 독점하지 않으므로 다른 작업이 가능합니다. (즉, 다른창을 선택 가능)
- show()의 실행 형식으로 독립적이지 않습니다. (이 부분은 좀 더 공부 필요)



■ Flatform 
1. file 입출력 / GUI (table) + 
2. pandas


Python 3.8.10 64-bit

■ 아나콘다 완전 제거
http://daplus.net/python-windows%ec%97%90%ec%84%9c-%ec%95%84%eb%82%98%ec%bd%98%eb%8b%a4%eb%a5%bc-%ec%99%84%ec%a0%84%ed%9e%88-%ec%a0%9c%ea%b1%b0%ed%95%98%eb%8a%94-%eb%b0%a9%eb%b2%95%ec%9d%80-%eb%ac%b4%ec%97%87/


[회사]
flask_firebase_blog - C:\project1\flask_firebase_blog
HTML_CSS_JS - C:\project1\HTML_CSS_JS
Jupyter - F:\Repo_Office\Jupyter

E:\Repo_Office 에 정리 필요

[집]
management - ?
WordCloud - 문제 진행X
WordCloud2
React-Management-Tutorial
git-url - git test
vscode-git
Flask_Ex
react_app
vuedonsan
my-first-web-site


Office repository
C:\project1\flask_firebase_blog → Home repository push 후 시작

기존
C:\Users\Administrator\flask_firebase_blog\flask_firebase_blog 
Office repo update 후 repo 삭제 필요

관련 메모장 포함
Jupyter note 사용 화일들
C:\Users\Administrator\HTML Ex

C:\ 용량부족 F:\Repo_Office 시험운영 뒤 문제없으면 이동 필요
F:\Repo_Office\Jupyter
내 손으로 하는 데이터 분석을 위한 파이썬 Pandas 기초 검토 중




■ Jupyter note 다른 드라이브에서 시작
Anaconda prompt> E:> \Repo_Office\Program 공부> jupyter notebook

■ 32bit, 64bit 모두 사용
https://all-share-source-code.tistory.com/23

■ import PyQt5Singleton import Singleton
(함수 없는 경우 pip install singleton)

(2) 싱글턴 클래스 생성하기 : 매타클래스 이용
  싱글턴 기능을 하는 매타클래스를 만들게 되면, 이를 이용하여 만든 클래스는 인스턴스가 오직 하나만 존재합니다. 
간략히 말씀드리면, 유일한 객체를 만들 수 있게 된다는 뜻입니다. (객체 : a, b, c....와 같은 것)
싱글턴을 생성하는 방법은 크게 5가지가 존재합니다. 저는 복잡한 방법을 설명하기 보다 내장 함수를 그대로 클래스에 상속시켜 
사용하는 법을 택하였습니다.

class 
 ◈ class Kiwoom(QWwidget, metaclass=Singleton) : 
Kiwoom 클래스는 metaclass=Singleton에 의해 생성된 객체입니다. 
즉, Kiwoom 클래스는 매타클래스에 의해 이미 인스턴스화 되었다는 의미입니다. 그러므로 Kiwoom에서 생성되는 모든 객체는 
유일한 것이 됩니다(이 부분이 가장 중요합니다). 
 - 매타클래스 : 클래스를 관리하는 클래스, 클래스라는 객체를 만들기 위한 클래스(어렵죠? 차차 알아 봅시다)
 - 객체 : a = b에서 a는 객체, b는 클래스
 - 인스턴스 : a = b에서 a는 b의 인스턴스 (말 장난 같지만... 잘 이해하시 바랍니다.)

super().__init__(parent, **kwargs) :
상속받은 QWigdet, metaclass=Singleton을 사용하기 위해 적는 코드

(3) 키움 로그인 객체 생성 : 유일한 객체
  키움에 로그인하기 위해서는 QAxWidget('KHOPENAPI.KHOpenAPICtrl.1')의 인스턴스가 반드시 필요합니다. 
앞으로 키움에서 제공하는 함수를 사용하기 위해서는 "반드시" self.kiwoom을 사용해야 합니다.

 self.kiwoom = QAxWidget('KHOPENAPI.KHOpenAPICtrl.1')

  키움증권에서 제공하는 클래스는 각각 고유의 CLSID 또는 ProgID를 가지고 있습니다. 
해당 값을 QAxWidget클래스로 전달하면 인스턴스가 생성되는데 이때 인스턴스는 self.kiwoom이라 정의 하였습니다.
키움증권 개발 가이드를 참조하면 ProgID는 'KHOPENAPI.KHOpenAPICtrl.1'임을 알 수 있고 이를 QAxWidget로 전달합니다. 
이렇게 하면 우리는 키움증권 클래스를 사용할 수 있게 됩니다.

앞으로 각각의 스레드에서 키움 주문과 검색을 할텐데 모든 스레드에서는 QAxWidget('KHOPENAPI.KHOpenAPICtrl.1')을 입력해야 합니다. 
하지만 우리는 Kiwoom이라는 클래스의 self.kiwoom에 객체화 했기 때문에 유일한 값이 되어 각각의 스레드에서는 
Kiwoom 클래스에 접속하는 순간 키움의 모든 클래스를 사용할 수 있게 됩니다.

쉽게 말씀드리면, Kiwoom 클래스에 명시된 값들은 유일한 값을 가지고 절대적이라 스레드가 여기에 접속만 한다면 
키움 증권의 어떤 클래스든 사용할 수 있다는 뜻입니다.(마법은 언어 입니다.)

2. 요약
  모든 클래스와 스레드들이 각자 놀지 않고 서로서로 통신을 하기 위해서는 절대적인 교두보가 필요합니다. 
이역할을 하는 것이 싱글턴이며, 매타클래스를 활용하여 만들어집니다. 
우리는 Kiwoom이라는 클래스를 싱글턴으로 만들었고 Kiwoom 클래스 내에 정의된 모든 변수와 객체는 
다른 모든 클래스와 스레드들이 공유할 수 있습니다. 
예로 스레드에서 키움 클래스를 사용하기 위해서는 스레드마다 QAxWidget('KHOPENAPI.KHOpenAPICtrl.1')를 할당해야 되나, 
우리는 Kiwoom이라는 클래스를 싱글턴에 
QAxWidget('KHOPENAPI.KHOpenAPICtrl.1')을 할당하여 키움증권 클래스를 사용하고 싶은 클래스 또는 스레드가 접속만 하면 
모든 기능이 수행되게끔 만들었습니다. 너~무 어려운 내용입니다. 
중급이나 고급 정도 되셔야 이해가 되는 내용이지만 ALBA 프로그램이 이를 바탕으로 제작되었기 때문에 설명 드리고 넘어 갑니다. 
혹시 이해가 되지 않으시면 코드만 입력하시면 되겠습니다. 앞으로도 계속 설명드릴 것입니다.

집 python 3.8.10 pyside2 (QT designer), singleton 가능 확인